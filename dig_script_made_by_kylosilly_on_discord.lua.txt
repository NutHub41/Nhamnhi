if not game:IsLoaded() then
    game.Loaded:Wait()
end

get_service = setmetatable({}, {
    __index = function(self, index)
        return cloneref(game.GetService(game, index))
    end
})

local proximityprompt_service = get_service.ProximityPromptService
local virtual_input_manager = get_service.VirtualInputManager
local marketplace_service = get_service.MarketplaceService
local replicated_storage = get_service.ReplicatedStorage
local user_input_service = get_service.UserInputService
local virtual_user = get_service.VirtualUser
local run_service = get_service.RunService
local workspace = get_service.Workspace
local players = get_service.Players
local stats = get_service.Stats

local info = marketplace_service:GetProductInfo(game.PlaceId)
local local_player = players.LocalPlayer
local backpack = local_player.Backpack

if not firesignal then
    local_player:Kick("You prob have the shittiest executor seen in humanity that it dosent have firesignal go away LOL")
end

local world = workspace:FindFirstChild("World")

if not world then
    return local_player:Kick("World folder not found!")
end

local npcs = world:FindFirstChild("NPCs")

if not npcs then
    return local_player:Kick("NPCs folder not found!")
end

local zones = world:FindFirstChild("Zones"):FindFirstChild("_Ambience")

if not zones then
    return local_player:Kick("Zones folder not found!")
end

local hole_folders = world:FindFirstChild("Zones"):FindFirstChild("_NoDig")

if not hole_folders then
    return local_player:Kick("Holes folder not found!")
end

local totems = workspace:FindFirstChild("Active"):FindFirstChild("Totems")

if not totems then
    return local_player:Kick("Totems folder not found!")
end

local bosses = workspace:FindFirstChild("Spawns"):FindFirstChild("BossSpawns")

if not bosses then
    return local_player:Kick("Bosses folder not found!")
end

local purchaseable_names = {}
local boss_names = {}
local zone_names = {}
local npc_names = {}

local staff_option = "Notify"
local dig_option = "Legit"

local auto_sell_delay = 5
local tp_walk_speed = 10

local auto_pizza = false
local anti_staff = false
local auto_sell = false
local auto_hole = false
local inf_jump = false
local anti_afk = false
local auto_dig = false

function get_tool()
    return local_player.Character:FindFirstChildOfClass("Tool")
end

function closest_totem()
    local totem = nil
    local dist = 9e99

    for _, v in totems:GetChildren() do
        if v:GetAttribute("IsActive") then
            local distance = (v:GetPivot().Position - local_player.Character:GetPivot().Position).Magnitude
            if distance < dist then
                dist = distance
                totem = v
            end
        end
    end

    return totem
end

local anti_afk_connections = local_player.Idled:Connect(function()
    if anti_afk then
        virtual_user:CaptureController()
        virtual_user:ClickButton2(Vector2.new())
    end
end)

local dig_connection = local_player.PlayerGui.ChildAdded:Connect(function(v)
    if auto_dig and not auto_pizza and v.Name == "Dig" then
        local strong_hit = v:FindFirstChild("Safezone"):FindFirstChild("Holder"):FindFirstChild("Area_Strong")
        local player_bar = v:FindFirstChild("Safezone"):FindFirstChild("Holder"):FindFirstChild("PlayerBar")
        local mobile_button = v:FindFirstChild("MobileClick")
        local minigame_connection = player_bar:GetPropertyChangedSignal("Position"):Connect(function()
            if not auto_dig or auto_pizza then return end
            if dig_option == "Legit" and math.abs(player_bar.Position.X.Scale - strong_hit.Position.X.Scale) <= 0.04 then
                firesignal(mobile_button.Activated)
                task.wait()
            elseif dig_option == "Blatant" then
                player_bar.Position = UDim2.new(strong_hit.Position.X.Scale, 0, 0, 0)
                firesignal(mobile_button.Activated)
                task.wait()
            end
        end)
    end
end)

user_input_service.JumpRequest:Connect(function()
    if inf_jump and not tweeksiscute then
        tweeksiscute = true
        local_player.Character:FindFirstChild("Humanoid"):ChangeState("Jumping")
        wait()
        tweeksiscute = false
    end
end)

local movement_connection = run_service.Heartbeat:Connect(function()
    if tp_walk and local_player.Character:FindFirstChild("Humanoid") then
        if local_player.Character.Humanoid.MoveDirection.Magnitude > 0 then
            local_player.Character:TranslateBy(local_player.Character.Humanoid.MoveDirection * tp_walk_speed / 10)
        end
    end
end)

local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()



local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local Lighting = game:GetService("Lighting")
local player = Players.LocalPlayer

wait(0.1)
local Window = WindUI:CreateWindow({
    Title = "VerdantHub | "..game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name.."",
    Icon = "rbxassetid://92380606785197",
    Author = ".by Zuneh | .gg//dBh5TBKX",
    Folder = "",
    Size = UDim2.fromOffset(450, 290),
    Transparent = true,
    Theme = "Dark",
    SideBarWidth = 200,
    -- Background = "",
    User = {
        Enabled = true,
        Anonymous = false,
        Callback = function()
            themes = {'Rose', 'Indigo', 'Plant', 'Red', 'Light', 'Dark'}
            local count, curTheme = nil, WindUI:GetCurrentTheme()
            if table.find(themes, curTheme) == #themes then count = -5 else count = 1 end
            WindUI:SetTheme(themes[table.find(themes, curTheme)+count])
        end,
    }
})


Window:SetToggleKey(Enum.KeyCode.F15)




local ScreenGui = Instance.new("ScreenGui")
local ImageButton = Instance.new("ImageButton")
local UICorner = Instance.new("UICorner")

ScreenGui.Parent = game.CoreGui
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

ImageButton.Parent = ScreenGui
ImageButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
ImageButton.BorderSizePixel = 0
ImageButton.Position = UDim2.new(0, 10, 1, -85)
ImageButton.Size = UDim2.new(0, 50, 0, 50)
ImageButton.Draggable = true
ImageButton.Image = "http://www.roblox.com/asset/ ?id=92380606785197"

UICorner.CornerRadius = UDim.new(0, 13) 
UICorner.Parent = ImageButton

ImageButton.MouseButton1Down:Connect(function()
    game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.F15,false, game)
end)

local farm_tab = Window:Tab({
    Title = "Farm",
    Icon = "tractor",
    Locked = false,
})




local minigame_connection
local local_player = game.Players.LocalPlayer


-- Toggle auto dig
farm_tab:Toggle({
    Title = "Auto Dig Minigame",
    Desc = "Automatically does the dig minigame for you",
    Icon = "check",
    Type = "Checkbox",
    Default = auto_dig,
    Callback = function(value)
        auto_dig = value
        AutoClick = value

        -- Ngắt kết nối cũ nếu có
        if minigame_connection then
            minigame_connection:Disconnect()
            minigame_connection = nil
        end

        if value then
            local dig_ui = local_player.PlayerGui:FindFirstChild("Dig")
            if dig_ui and not auto_pizza then
                local success, holder = pcall(function()
                    return dig_ui:WaitForChild("Safezone"):WaitForChild("Holder")
                end)

                if success and holder then
                    local strong_hit = holder:FindFirstChild("Area_Strong")
                    local player_bar = holder:FindFirstChild("PlayerBar")
                    local mobile_button = dig_ui:FindFirstChild("MobileClick")

                    if strong_hit and player_bar and mobile_button then
                        minigame_connection = player_bar:GetPropertyChangedSignal("Position"):Connect(function()
                            if not auto_dig then return end

                            -- Blatant mode: dịch thanh người chơi về đúng chỗ và click luôn
                            player_bar.Position = UDim2.new(strong_hit.Position.X.Scale, 0, 0, 0)
                            firesignal(mobile_button.Activated)
                        end)
                    end
                end
            end
        end
    end
})

Instance.new("RemoteEvent", replicated_storage:FindFirstChild("Remotes")).Name = "bWFkZSBieSBAa3lsb3NpbGx5IG9uIGRpc2NvcmQgPDM"

farm_tab:Toggle({
    Title = "Auto Holes",
    Desc = "Creates holes if not in dig minigame",
    Icon = "check",
    Type = "Checkbox",
    Default = auto_hole,
    Callback = function(value) 
        auto_hole = value
        if value then
            repeat
                if not auto_pizza then
                    local tool = get_tool()
                    if not tool or not tool.Name:find("Shovel") then
                        for _, v in backpack:GetChildren() do
                            if v.Name:find("Shovel") then
                                v.Parent = local_player.Character
                            end
                        end
                    end
                    if hole_folders:FindFirstChild(local_player.Name.."_Crater_Hitbox") then
                        hole_folders[local_player.Name.."_Crater_Hitbox"]:Destroy()
                    end
                    if not local_player.PlayerGui:FindFirstChild("Dig") then
                        virtual_input_manager:SendMouseButtonEvent(0, 0, 0, true, game, 1)
                    end
                end
                task.wait(.5)
            until not auto_hole
        end
    end
})



spawn(function()
    game:GetService("RunService").RenderStepped:Connect(function()
        if AutoClick then
             pcall(function()
                game:GetService'VirtualUser':CaptureController()
                game:GetService'VirtualUser':Button1Down(Vector2.new(1e4, 1e4))
            end)
        end
    end)
end)
